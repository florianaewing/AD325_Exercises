Write a class named BankAccount where each object remembers information about a user's account at a bank. You must include the following public members:

member name	type	description
BankAccount(name)	constructor	constructs a new account for the person with the given name, with $0.00 balance
ba.name	property	the account name as a string (read-only)
ba.balance	property	the account balance as a real number (read-only)
ba.deposit(amount)	method	adds the given amount of money, as a real number, to the account balance; if the amount is negative, does nothing
ba.withdraw(amount)	method	subtracts the given amount of money, as a real number, from the account balance; if the amount is negative or exceeds the account's balance, does nothing

You should define the entire class including the class heading, the private instance variables, and the declarations and definitions of all the public member functions and constructor.
class BankAccount:
    def __init__(self, name):
        """Constructor that initializes the account with the owner's name and a balance of $0.00."""
        self._name = name         # Private instance variable for account owner's name
        self._balance = 0.0       # Private instance variable for account balance

    @property
    def name(self):
        """Read-only property for the account owner's name."""
        return self._name

    @property
    def balance(self):
        """Read-only property for the account balance."""
        return self._balance

    def deposit(self, amount):
        """Adds the given amount to the account balance. Ignores negative amounts."""
        if amount > 0:
            self._balance += amount

    def withdraw(self, amount):
        """Subtracts the given amount from the account balance. Ignores negative amounts or overdrafts."""
        if amount > 0 and amount <= self._balance:
            self._balance -= amount


Add a property to the BankAccount class named transaction_fee for a real number representing an amount of money to deduct every time the user withdraws money. Use your BankAccount class solution from the previous exercises as a starting point to solve this exercise.

Suppose that a class of objects named BankAccount has already been created that remembers information about a user's account at a bank. The class includes the following public members:

member name	type	description
BankAccount(name)	constructor	constructs a new account for the person with the given name, with $0.00 balance
ba._name,
ba._balance	data attributes	private attributes storing account's name and balance
ba.name	property	the account name as a string (read-only)
ba.balance	property	the account balance as a real number (read-only)
ba.deposit(amount)	method	adds the given amount of money, as a real number, to the account balance; if the amount is negative, does nothing
ba.withdraw(amount)	method	subtracts the given amount of money, as a real number, from the account balance; if the amount is negative or exceeds the account's balance, does nothing
Add a property to the class named transaction_fee for a real number representing an amount of money to deduct every time the user withdraws. The default value is $0.00, but the client can change the value. Deduct the transaction fee money during every withdraw call (but not from deposits). Make sure that the balance cannot go negative during a withdrawal. If the withdrawal (amount plus transaction fee) would cause it to become negative, don't modify the balance at all. Do not allow negative transaction fees; if the client attempts to set a negative transaction fee, leave its value unchanged.

Since adding this property changes several parts of the class, write and submit an entirely new version of the complete BankAccount class, along with its constructors, properties, methods, etc. You may want to copy/paste your solution from the BankAccount exercise as a starting point.
class BankAccount:
    def __init__(self, name):
        self._name = name
        self._balance = 0.0
        self._transaction_fee = 0.0

    @property
    def name(self):
        return self._name

    @property
    def balance(self):
        return self._balance

    @property
    def transaction_fee(self):
        return self._transaction_fee

    @transaction_fee.setter
    def transaction_fee(self, fee):
        if fee >= 0:
            self._transaction_fee = fee

    def deposit(self, amount):
        if amount > 0:
            self._balance += amount

    def withdraw(self, amount):
        total_deduction = amount + self._transaction_fee
        if amount > 0 and total_deduction <= self._balance:
            self._balance -= total_deduction

Add a __str__ method to the BankAccount class. Use your BankAccount class solution from the previous exercises as a starting point to solve this exercise.

Suppose that a class of objects named BankAccount has already been created that remembers information about a user's account at a bank. The class includes the following public members:

member name	type	description
BankAccount(name)	constructor	constructs a new account for the person with the given name, with $0.00 balance
ba._name,
ba._balance	data attributes	private attributes storing account's name and balance
ba.name	property	the account name as a string (read-only)
ba.balance	property	the account balance as a real number (read-only)
ba.deposit(amount)	method	adds the given amount of money, as a real number, to the account balance; if the amount is negative, does nothing
ba.withdraw(amount)	method	subtracts the given amount of money, as a real number, from the account balance; if the amount is negative or exceeds the account's balance, does nothing
Add a __str__ method to the class that returns a string containing the account's name and balance separated by a comma and space. Round the balance to two digits after the decimal point. For example, if an account object named yana has the name "Mariana" and a balance of 3.5 (representing $3.50), the call str(yana) should return the string "Mariana, $3.50". Submit only your __str__ method, not the complete class.
def __str__(self):
    return f"{self.name}, ${self.balance:.2f}"
Write a recursive function named factorial that accepts an integer n as a parameter and returns the factorial of n, or n!. A factorial of an integer is defined as the product of all integers from 1 through that integer inclusive. For example, the call of factorial(4) should return 1 * 2 * 3 * 4, or 24. The factorial of 0 and 1 are defined to be 1. You may assume that the value passed is non-negative and that its factorial can fit in the range of type int.

Do not use loops or auxiliary data structures; solve the problem recursively.
def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)

Given a number nn, write a formula that returns n!n!.
In case you forgot the factorial formula, n!=n∗(n−1)∗(n−2)∗.....2∗1n!=n∗(n−1)∗(n−2)∗.....2∗1.
For example, 5!=5∗4∗3∗2∗1=1205!=5∗4∗3∗2∗1=120 so we'd return 120.
Assume is nn is a non-negative integer.
def factorial(n):
    # Base case: If n is 0 or 1, the factorial is simply 1.
    # Why? Because 0! and 1! are both defined as 1 by convention.
    # Think of it as the 'no-multiplication-needed' case.
    if n == 0 or n == 1:
        return 1
    else:
        # Recursive case: Multiply n by the factorial of (n - 1).
        # We keep breaking down the problem into smaller pieces
        # until we reach that sweet base case.
        # Each recursive call peels off one layer of n until
        # it hits the base case and works its way back up.
        return n * factorial(n - 1)